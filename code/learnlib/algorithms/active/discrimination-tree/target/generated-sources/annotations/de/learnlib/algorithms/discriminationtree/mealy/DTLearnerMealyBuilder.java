/*
 * Automatically generated by BuilderGen, https://github.com/misberner/buildergen.
 * DO NOT EDIT THIS FILE! Your changes will be overwritten.
 * Edit the @GenerateBuilder specification of class
 * de.learnlib.algorithms.discriminationtree.mealy.DTLearnerMealy<I,O>
 */

package de.learnlib.algorithms.discriminationtree.mealy;

public final class DTLearnerMealyBuilder<
		I extends java.lang.Object,
		O extends java.lang.Object> {

	private static<
			I extends java.lang.Object,
			O extends java.lang.Object> de.learnlib.algorithms.discriminationtree.mealy.DTLearnerMealy<I,O> $createDispatch(
		net.automatalib.words.Alphabet<I> alphabet,
		de.learnlib.api.oracle.MembershipOracle<I,net.automatalib.words.Word<O>> oracle,
		de.learnlib.counterexamples.LocalSuffixFinder<? super I,? super net.automatalib.words.Word<O>> suffixFinder,
		boolean repeatedCounterexampleEvaluation
		) {
		return new de.learnlib.algorithms.discriminationtree.mealy.DTLearnerMealy<I,O>(
			alphabet,
			oracle,
			suffixFinder,
			repeatedCounterexampleEvaluation
			);
	}

	private net.automatalib.words.Alphabet<I> alphabet;
	private de.learnlib.api.oracle.MembershipOracle<I,net.automatalib.words.Word<O>> oracle;
	private de.learnlib.counterexamples.LocalSuffixFinder<? super I,? super net.automatalib.words.Word<O>> suffixFinder;
	private boolean repeatedCounterexampleEvaluation;

	public DTLearnerMealyBuilder() {
		this.suffixFinder = de.learnlib.algorithms.discriminationtree.AbstractDTLearner.BuilderDefaults.suffixFinder();
		this.repeatedCounterexampleEvaluation = de.learnlib.algorithms.discriminationtree.AbstractDTLearner.BuilderDefaults.repeatedCounterexampleEvaluation();
	}

	public de.learnlib.algorithms.discriminationtree.mealy.DTLearnerMealy<I,O> create() {
		return $createDispatch(
			this.alphabet,
			this.oracle,
			this.suffixFinder,
			this.repeatedCounterexampleEvaluation
			);
	}

	public net.automatalib.words.Alphabet<I> getAlphabet() {
		return this.alphabet;
	}
	public void setAlphabet(net.automatalib.words.Alphabet<I> alphabet) {
		this.alphabet = alphabet;
	}
	public DTLearnerMealyBuilder<I, O> withAlphabet(net.automatalib.words.Alphabet<I> alphabet) {
		this.alphabet = alphabet;
		return this;
	} 

	public de.learnlib.api.oracle.MembershipOracle<I,net.automatalib.words.Word<O>> getOracle() {
		return this.oracle;
	}
	public void setOracle(de.learnlib.api.oracle.MembershipOracle<I,net.automatalib.words.Word<O>> oracle) {
		this.oracle = oracle;
	}
	public DTLearnerMealyBuilder<I, O> withOracle(de.learnlib.api.oracle.MembershipOracle<I,net.automatalib.words.Word<O>> oracle) {
		this.oracle = oracle;
		return this;
	} 

	public de.learnlib.counterexamples.LocalSuffixFinder<? super I,? super net.automatalib.words.Word<O>> getSuffixFinder() {
		return this.suffixFinder;
	}
	public void setSuffixFinder(de.learnlib.counterexamples.LocalSuffixFinder<? super I,? super net.automatalib.words.Word<O>> suffixFinder) {
		this.suffixFinder = suffixFinder;
	}
	public DTLearnerMealyBuilder<I, O> withSuffixFinder(de.learnlib.counterexamples.LocalSuffixFinder<? super I,? super net.automatalib.words.Word<O>> suffixFinder) {
		this.suffixFinder = suffixFinder;
		return this;
	} 

	public boolean getRepeatedCounterexampleEvaluation() {
		return this.repeatedCounterexampleEvaluation;
	}
	public void setRepeatedCounterexampleEvaluation(boolean repeatedCounterexampleEvaluation) {
		this.repeatedCounterexampleEvaluation = repeatedCounterexampleEvaluation;
	}
	public DTLearnerMealyBuilder<I, O> withRepeatedCounterexampleEvaluation(boolean repeatedCounterexampleEvaluation) {
		this.repeatedCounterexampleEvaluation = repeatedCounterexampleEvaluation;
		return this;
	} 

}