/*
 * Automatically generated by BuilderGen, https://github.com/misberner/buildergen.
 * DO NOT EDIT THIS FILE! Your changes will be overwritten.
 * Edit the @GenerateBuilder specification of class
 * de.learnlib.modelchecking.modelchecker.LTSminLTLAlternating<I,O>
 */

package de.learnlib.modelchecking.modelchecker;

public final class LTSminLTLAlternatingBuilder<
		I extends java.lang.Object,
		O extends java.lang.Object> {

	private static<
			I extends java.lang.Object,
			O extends java.lang.Object> de.learnlib.modelchecking.modelchecker.LTSminLTLAlternating<I,O> $createDispatch(
		boolean keepFiles,
		java.util.function.Function<java.lang.String,I> string2Input,
		java.util.function.Function<java.lang.String,O> string2Output,
		int minimumUnfolds,
		double multiplier,
		java.util.Collection<? super O> skipOutputs
		) {
		return new de.learnlib.modelchecking.modelchecker.LTSminLTLAlternating<I,O>(
			keepFiles,
			string2Input,
			string2Output,
			minimumUnfolds,
			multiplier,
			skipOutputs
			);
	}

	private boolean keepFiles;
	private java.util.function.Function<java.lang.String,I> string2Input;
	private java.util.function.Function<java.lang.String,O> string2Output;
	private int minimumUnfolds;
	private double multiplier;
	private java.util.Collection<? super O> skipOutputs;

	public LTSminLTLAlternatingBuilder() {
		this.keepFiles = de.learnlib.modelchecking.modelchecker.AbstractLTSminLTL.BuilderDefaults.keepFiles();


		this.minimumUnfolds = de.learnlib.modelchecking.modelchecker.AbstractLTSminLTL.BuilderDefaults.minimumUnfolds();
		this.multiplier = de.learnlib.modelchecking.modelchecker.AbstractLTSminLTL.BuilderDefaults.multiplier();

	}

	public de.learnlib.modelchecking.modelchecker.LTSminLTLAlternating<I,O> create() {
		return $createDispatch(
			this.keepFiles,
			this.string2Input,
			this.string2Output,
			this.minimumUnfolds,
			this.multiplier,
			this.skipOutputs
			);
	}

	public boolean getKeepFiles() {
		return this.keepFiles;
	}
	public void setKeepFiles(boolean keepFiles) {
		this.keepFiles = keepFiles;
	}
	public LTSminLTLAlternatingBuilder<I, O> withKeepFiles(boolean keepFiles) {
		this.keepFiles = keepFiles;
		return this;
	} 

	public java.util.function.Function<java.lang.String,I> getString2Input() {
		return this.string2Input;
	}
	public void setString2Input(java.util.function.Function<java.lang.String,I> string2Input) {
		this.string2Input = string2Input;
	}
	public LTSminLTLAlternatingBuilder<I, O> withString2Input(java.util.function.Function<java.lang.String,I> string2Input) {
		this.string2Input = string2Input;
		return this;
	} 

	public java.util.function.Function<java.lang.String,O> getString2Output() {
		return this.string2Output;
	}
	public void setString2Output(java.util.function.Function<java.lang.String,O> string2Output) {
		this.string2Output = string2Output;
	}
	public LTSminLTLAlternatingBuilder<I, O> withString2Output(java.util.function.Function<java.lang.String,O> string2Output) {
		this.string2Output = string2Output;
		return this;
	} 

	public int getMinimumUnfolds() {
		return this.minimumUnfolds;
	}
	public void setMinimumUnfolds(int minimumUnfolds) {
		this.minimumUnfolds = minimumUnfolds;
	}
	public LTSminLTLAlternatingBuilder<I, O> withMinimumUnfolds(int minimumUnfolds) {
		this.minimumUnfolds = minimumUnfolds;
		return this;
	} 

	public double getMultiplier() {
		return this.multiplier;
	}
	public void setMultiplier(double multiplier) {
		this.multiplier = multiplier;
	}
	public LTSminLTLAlternatingBuilder<I, O> withMultiplier(double multiplier) {
		this.multiplier = multiplier;
		return this;
	} 

	public java.util.Collection<? super O> getSkipOutputs() {
		return this.skipOutputs;
	}
	public void setSkipOutputs(java.util.Collection<? super O> skipOutputs) {
		this.skipOutputs = skipOutputs;
	}
	public LTSminLTLAlternatingBuilder<I, O> withSkipOutputs(java.util.Collection<? super O> skipOutputs) {
		this.skipOutputs = skipOutputs;
		return this;
	} 

}